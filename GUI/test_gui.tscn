[gd_scene load_steps=17 format=2]

[ext_resource path="res://GUI/test_gui.gd" type="Script" id=1]
[ext_resource path="res://GUI/draw_gui.gd" type="Script" id=2]
[ext_resource path="res://test2_chars/main_ship.tscn" type="PackedScene" id=3]
[ext_resource path="res://GUI/module_generator.gd" type="Script" id=4]
[ext_resource path="res://mechanics/module_class.tscn" type="PackedScene" id=5]
[ext_resource path="res://GUI/enemy.gd" type="Script" id=6]
[ext_resource path="res://mechanics/enemy_pattern.tscn" type="PackedScene" id=7]
[ext_resource path="res://GUI/terminal.tscn" type="PackedScene" id=8]
[ext_resource path="res://GUI/ship_gui.tscn" type="PackedScene" id=9]
[ext_resource path="res://music/ld43_ambient.wav" type="AudioStream" id=10]

[sub_resource type="Shader" id=1]

code = "shader_type canvas_item;

uniform float BarrelPower =1.1;

vec2 distort(vec2 p) 
{

	float angle = p.y / p.x;
	float theta = atan(p.y,p.x);
	float radius = pow(length(p), BarrelPower);
	
	p.x = radius * cos(theta);
	p.y = radius * sin(theta);
	
	return 0.5 * (p + vec2(1.0,1.0));
}
void fragment()
{
	
vec2 xy = SCREEN_UV * 2.0;
xy.x -= 1.0;
xy.y -= 1.0;

float d = length(xy);
if(d < 1.5){
	xy = distort(xy);
}
else{
	xy = SCREEN_UV;
}
COLOR = texture(SCREEN_TEXTURE,xy);
}"

[sub_resource type="ShaderMaterial" id=2]

render_priority = 0
shader = SubResource( 1 )
shader_param/BarrelPower = 1.05

[sub_resource type="Animation" id=3]

resource_name = "death"
length = 1.0
loop = false
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath(".:color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 0 ), Color( 0, 0, 0, 1 ), Color( 0, 0, 0, 1 ) ]
}

[sub_resource type="Animation" id=4]

resource_name = "start"
length = 1.0
loop = false
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath(".:color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.9 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 1 ), Color( 0, 0, 0, 0 ) ]
}

[sub_resource type="Shader" id=5]

code = "shader_type canvas_item;

vec2 hash( vec2 x , float time)
{
    vec2 k = vec2( 0.3283099 * sin(time), 0.318794 + cos(time));
    x = x*k + k.yx;
    return -1.0 + 2.0*fract( time * 0.01 + 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );
}
 
float noise( in vec2 p , float time)
{
    vec2 i = floor( p );
    vec2 f = fract( p );
 
    vec2 u = f*f*(3.0-2.0*f);
 
    return mix( mix( dot( hash( i + vec2(0.0,0.0) , time * 0.01), f - vec2(0.0,0.0) ),
                     dot( hash( i + vec2(1.0,0.0) , time * 2.2), f - vec2(1.0,0.0) ), u.x),
                mix( dot( hash( i + vec2(0.0,1.0) , time * 1.8), f - vec2(0.0,1.0) ),
                     dot( hash( i + vec2(1.0,1.0) , time * 1.11 + time * 2.0), f - vec2(1.0,1.0) ), u.x), u.y);
}
 
void fragment()
{

    vec2 p = UV;
	vec2 uv = p*vec2(SCREEN_PIXEL_SIZE.x/SCREEN_PIXEL_SIZE.y,1.0);
 
    float f = 0.0;
 
    f = noise( 800.0*uv , TIME);
 
    f = 0.5 + 0.5*f;

    COLOR = vec4(f, f, f, 0.05);
}"

[sub_resource type="ShaderMaterial" id=6]

render_priority = 0
shader = SubResource( 5 )

[node name="main_test" type="Node2D"]
script = ExtResource( 1 )

[node name="bg_canvas_layer" type="CanvasLayer" parent="."]
editor/display_folded = true
layer = -1
offset = Vector2( 0, 0 )
rotation = 0.0
scale = Vector2( 1, 1 )
transform = Transform2D( 1, 0, 0, 1, 0, 0 )

[node name="background" type="ColorRect" parent="bg_canvas_layer"]
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 1.0
anchor_bottom = 1.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 2
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
color = Color( 0.105882, 0.12549, 0.14902, 1 )

[node name="map_layer" type="Node2D" parent="."]

[node name="GG" type="Node2D" parent="map_layer"]

[node name="lines_gui" type="Node2D" parent="map_layer/GG"]
script = ExtResource( 2 )
links_count = 7

[node name="main_camera" type="Camera2D" parent="map_layer/GG"]
anchor_mode = 1
rotating = false
current = true
zoom = Vector2( 1, 1 )
limit_left = -10000000
limit_top = -10000000
limit_right = 10000000
limit_bottom = 10000000
limit_smoothed = false
drag_margin_h_enabled = false
drag_margin_v_enabled = false
smoothing_enabled = false
smoothing_speed = 5.0
offset_v = 0.0
offset_h = 0.0
drag_margin_left = 0.2
drag_margin_top = 0.2
drag_margin_right = 0.2
drag_margin_bottom = 0.2
editor_draw_screen = true
editor_draw_limits = false
editor_draw_drag_margin = false

[node name="main_ship" parent="map_layer/GG" instance=ExtResource( 3 )]

[node name="module_generator" type="Node2D" parent="map_layer/GG/main_ship"]
scale = Vector2( 1.42857, 1.42857 )
script = ExtResource( 4 )
_module = ExtResource( 5 )

[node name="enemy" type="Node2D" parent="map_layer"]
editor/display_folded = true
script = ExtResource( 6 )
enemy = ExtResource( 7 )

[node name="enemy_pattern" parent="map_layer/enemy" instance=ExtResource( 7 )]
position = Vector2( 617.089, 249.648 )

[node name="enemy_pattern2" parent="map_layer/enemy" instance=ExtResource( 7 )]
position = Vector2( 267.229, 585.443 )

[node name="enemy_pattern3" parent="map_layer/enemy" instance=ExtResource( 7 )]
position = Vector2( 267.229, 585.443 )

[node name="neutral" type="Node2D" parent="map_layer"]

[node name="structures" type="Node2D" parent="map_layer"]

[node name="middle_canvas_layer" type="CanvasLayer" parent="."]
layer = 1
offset = Vector2( 0, 0 )
rotation = 0.0
scale = Vector2( 1, 1 )
transform = Transform2D( 1, 0, 0, 1, 0, 0 )

[node name="TERMINAL" parent="middle_canvas_layer" instance=ExtResource( 8 )]
anchor_top = 0.0
anchor_right = 1.0
margin_left = 0.0
margin_top = 0.0
margin_right = 0.0

[node name="GUI" parent="middle_canvas_layer" instance=ExtResource( 9 )]
margin_left = -2.0
margin_top = -2.0
margin_right = -2.0
margin_bottom = -2.0

[node name="lense_layer" type="ColorRect" parent="middle_canvas_layer"]
material = SubResource( 2 )
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -1933.0
margin_top = -2015.0
margin_right = 2067.0
margin_bottom = 1985.0
rect_min_size = Vector2( 4000, 4000 )
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 2
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
color = Color( 1, 1, 1, 1 )

[node name="top_canvas_layer" type="CanvasLayer" parent="."]
editor/display_folded = true
layer = 1
offset = Vector2( 0, 0 )
rotation = 0.0
scale = Vector2( 1, 1 )
transform = Transform2D( 1, 0, 0, 1, 0, 0 )

[node name="black_screen" type="ColorRect" parent="top_canvas_layer"]
editor/display_folded = true
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 1.0
anchor_bottom = 1.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 2
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
color = Color( 0, 0, 0, 0 )

[node name="black_screen_animator" type="AnimationPlayer" parent="top_canvas_layer/black_screen"]
root_node = NodePath("..")
autoplay = "start"
playback_process_mode = 1
playback_default_blend_time = 0.0
playback_speed = 1.0
anims/death = SubResource( 3 )
anims/start = SubResource( 4 )
blend_times = [  ]

[node name="noise_layer" type="ColorRect" parent="top_canvas_layer"]
material = SubResource( 6 )
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -2077.0
margin_top = -1927.0
margin_right = 1923.0
margin_bottom = 2073.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 2
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
color = Color( 0.105882, 0.12549, 0.14902, 1 )

[node name="audio_fx" type="Node2D" parent="."]
editor/display_folded = true

[node name="audio" type="AudioStreamPlayer" parent="audio_fx"]
stream = ExtResource( 10 )
volume_db = 0.0
pitch_scale = 1.0
autoplay = true
stream_paused = false
mix_target = 0
bus = "Master"

[connection signal="animation_finished" from="top_canvas_layer/black_screen/black_screen_animator" to="map_layer/GG/main_ship" method="_on_black_screen_animator_animation_finished"]
